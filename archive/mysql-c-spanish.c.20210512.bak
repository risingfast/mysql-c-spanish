//  mysql-c-spanish.c -- console application to maintain and show spanish language translations
//  Author: Geoffrey Jarman
//  Started: 05-Apr-2021
//  Reference:
//      https://qnaplus.com/how-to-access-mysql-database-from-c-program/
//  Compilation
//      gcc -g -o mysql-c-spanish $(mysql_config --cflags) mysql-c-spanish.c $(mysql_config --libs) cs50
//  Log:$
//      05-Apr-2021 started
//      05-Apr-2021 reviewed all
//      05-Apr-2021 consolecode
//      05-Apr-2021 change table to Spanish Words
//      09-Apr-2021 add clear page and print heading
//      30-Apr-2021 list words and list tests for words
//      01-May-2021 fix last block pause display
//      02-May-2021 implement options
//      02-May-2021 clear the buffer on getchar() calls
//  Enhancements:
//      Support narrow and wide list formats
//      Restrict tests to a single reference filter and decode in options

// includes and defines

#include <mysql.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "cs50.h"
#include <ctype.h>
#include <stdbool.h>

#define SQL_LEN 5000

// function prototypes

void fRetitleConsole(char *);                                      // clear and retitle the console
int  fListWordFields(char *);                              // show all spanish words on the console
int  fTestWordFields(char *);                       // test each spanish translation on the console
void fSetOptions(char *);                                         // display and set global options

// global variables

int  intListPageLines = 87;                                                  // display page length
char charListPageWidth = 'N';                                                 // display page width
int  intReferenceFilter = 0;                                                 // reference filter ID
int  intGroupFilter = 0;                                                         // group filter ID

int main(int argc, char *argv[])
{
// variable declarations

    char charMainChoice = '0';                                                  // main menu choice
    char *strPrgNme = argv[0] + 2;

// print the main menu to the console

    while (strchr("4xX", charMainChoice) == NULL)
    {
        fRetitleConsole(strPrgNme);
        printf("\n");
        printf("Main Menu");
        printf("\n\n");
        printf("1. (L)ist Words");
        printf("\n");
        printf("2. (T)est Words");
        printf("\n");
        printf("3. O(p)tions");
        printf("\n");
        printf("4. E(x)it");
        printf("\n\n");
        printf("Choice: ");
        charMainChoice = GetChar();
        if(strchr("1lL", charMainChoice) != NULL)
        {
            printf("\n");
            fListWordFields(strPrgNme);
            printf("\n");
        }
        else if(strchr("2tT", charMainChoice) != NULL)
        {
            printf("\n");
            fTestWordFields(strPrgNme);
            printf("\n");
        }
        else if(strchr("pP3", charMainChoice) != NULL)
        {
            printf("\n");
            fSetOptions(strPrgNme);
            printf("\n");
        }
    }
    printf("\n");
    return 0;
}

void fRetitleConsole(char *strPrgNme)
{
    (void) system("clear");
    printf("%s -- Spanish maintenance using mySQL.", strPrgNme);
    printf("\n");

    return;
}

int fListWordFields(char *strPrgNme)
{
    
// variable declarations

    MYSQL *conn;
    MYSQL_RES *res;
    MYSQL_ROW row;

    int i = 0;                                                                      // loop counter
    int intRowCount = 0;                                   // number of rows printed to the console
    int intColCount = 0;                                   // number of columns returned in a query
    int *intLengths = NULL;                                               // array of column widths
    char *server = "192.168.0.13";                                       // mySQL server IP address
    char *user = "gjarman";
    char *password = "Mpa4egu$";
    char *database = "risingfast";                                           // mySQL database name
    char strSQL[SQL_LEN] = {'\0'};                                               //SQL query string

// Initialize a connection and Connect to the database

    conn = mysql_init(NULL);


    if (!mysql_real_connect(conn, server, user, password, database, 0, NULL, 0))
    {
        printf("Failed to connect MySQL Server %s. Error: %s\n", server, mysql_error(conn));
        return 1;
    }

// define and send SQL query

    sprintf(strSQL, "SELECT `Word ID`"
                         ", `Word English`"
                         ", `Word Spanish`"
                         "FROM `Spanish Words`");

    if (mysql_query(conn, strSQL))
    {
        printf("\n");
        printf("Failed to execute mysql_query() in function %s().", __func__);
        printf("\n\n");
        printf("Error text: %s", mysql_error(conn));
        printf("\n\n");
        return 2;
    }

// store the results of the query

    res = mysql_store_result(conn);
    if (res == NULL)
    {
        return 3;
    }

// fetch the number of columns in the result

    intColCount = mysql_num_fields(res);

// fetch the width of each column in the result

    intLengths = (int *)calloc(intColCount, sizeof(int));
 
    while(row = mysql_fetch_row(res))
    {
        for (int k = 0; k < intColCount; k++)
        {
            if (row[k] != NULL)
            {
                if (strlen(row[k]) > intLengths[k])
                {
                     intLengths[k] = strlen(row[k]);
                }
            }
        }
    }

// reset the pointer in the result set to the start

    mysql_data_seek(res, 0);

// print the contents of the Spanish Words table to the consolee

    printf("\n\n");
    printf("Entries in the table SpanishWords:");
    printf("\n\n");

    while(row = mysql_fetch_row(res))
    {
        intRowCount++;
        for (i = 0; i < intColCount; i++)
        {
            printf("%-*s ", (int) strlen(row[i]), row[i] ? row[i] : "NULL");
            if (i == 1)
            {
                printf(" ... ");
            }
        }

        if (intRowCount >= intListPageLines)
        {
            printf("\n\n");
            printf("Press Enter key to continue");
            while (getchar() != '\n')
            {
                continue;
            }
            intRowCount = 0;
        }
        printf("\n");
    }

    printf("\n");
    printf("Press Enter key to continue");
    while( getchar() != '\n')
    {
        ;
    }
    printf("\n");

    mysql_free_result(res);
    mysql_close(conn);

    printf("\n");
    return 0;
}

int fTestWordFields(char *strPrgNme)
{
// variable declarations

    MYSQL *conn;
    MYSQL_RES *res;
    MYSQL_ROW row;

    int i = 0;                                                                      // loop counter
    int intRowCount = 0;                                   // number of rows printed to the console
    int intColCount = 0;                                   // number of columns returned in a query
    int *intLengths = NULL;                                               // array of column widths
    char *server = "192.168.0.13";                                       // mySQL server IP address
    char *user = "gjarman";
    char *password = "Mpa4egu$";
    char *database = "risingfast";                                           // mySQL database name
    char strSQL[SQL_LEN] = {'\0'};                                               //SQL query string

    fRetitleConsole(strPrgNme);
    printf("\n");
    printf("Main Menu > Test Words");

// Initialize a connection and Connect to the database

    conn = mysql_init(NULL);


    if (!mysql_real_connect(conn, server, user, password, database, 0, NULL, 0))
    {
        printf("Failed to connect MySQL Server %s. Error: %s\n", server, mysql_error(conn));
        return 1;
    }

// define and send SQL query

    sprintf(strSQL, "SELECT `Word ID`, `Word English`, `Word Spanish` FROM `Spanish Words`");

    if (mysql_query(conn, strSQL))
    {
        printf("\n");
        printf("Failed to execute mysql_query() in function %s().", __func__);
        printf("\n\n");
        printf("Error text: %s", mysql_error(conn));
        printf("\n\n");
        return 2;
    }

// store the results of the query

    res = mysql_store_result(conn);
    if (res == NULL)
    {
        return 3;
    }

// fetch the number of columns in the result

    intColCount = mysql_num_fields(res);

// fetch the width of each column in the result

    intLengths = (int *)calloc(intColCount, sizeof(int));

    while(row = mysql_fetch_row(res))
    {
        for (int k = 0; k < intColCount; k++)
        {
            if (row[k] != NULL)
            {
                if (strlen(row[k]) > intLengths[k])
                {
                     intLengths[k] = strlen(row[k]);
                }
            }
        }
    }

// reset the pointer in the result set to the start

    mysql_data_seek(res, 0);

// print the contents of the Spanish Words table to the consolee

    printf("\n\n");
    printf("Test spanish translations (key Enter for spanish:)");
    printf("\n\n");

    while(row = mysql_fetch_row(res))
    {
        intRowCount++;
        for (i = 0; i < intColCount; i++)
        {
            if (i == 0)
            {
                printf("%4s ", row[i] ? row[i] : "NULL");
            }
            else if(i == 1)
            {
                printf("%-*s ... ", (int) strlen(row[i]), row[i] ? row[i] : "NULL");
            }
            else 
            {
                while(getchar() != '\n')
                {
                    continue;
                }
                printf("     %-*s", (int) strlen(row[i]), row[i] ? row[i] : "NULL");
            }
        }
        printf("\n");
    }

    printf("\n");
    printf("Press Enter key to continue");
    while(getchar() != '\n')
    {
        continue;
    }
    printf("\n");

    mysql_free_result(res);
    mysql_close(conn);

    printf("\n");
    return 0;
}

void fSetOptions(char *strPrgNme)
{
    char charOptionChoice = '0';

    while (strchr("5xX", charOptionChoice) == NULL)
    {
        fRetitleConsole(strPrgNme);
        printf("\n");
        printf("Main Menu > Set Options");
        printf("\n\n");
        
        printf("1. (L)ist Page Lines:  %d", intListPageLines);
        printf("\n");
        if (charListPageWidth == 'N')
        {
            printf("2. List (W)idth:       Narrow");
        }
        else if (charListPageWidth == 'W')
        {
            printf("2. List (W)idth:       Wide");
        }
        printf("\n");
        printf("3. (R)eference Filter: %d", intReferenceFilter);
        printf("\n");
        printf("4. (G)roup Filter:     %d", intGroupFilter);
        printf("\n");
        printf("5. E(x)it Options:");
        printf("\n\n");
        printf("Choose: ");
        
        charOptionChoice = GetChar();
    
        if (strchr("1Ll", charOptionChoice) != NULL)
        {
            printf("\n");
            printf("List Page Lines: ");
            intListPageLines = GetInt();
        }
        else if(strchr("2wW", charOptionChoice) != NULL)
        {
            printf("\n");
            printf("List Page Width: ");
            charListPageWidth = GetChar();
        }
        else if(strchr("3rR", charOptionChoice) != NULL)
        {
            printf("\n");
            printf("Reference Filter ID: ");
            intReferenceFilter = GetInt();
        }
        else if(strchr("4gG", charOptionChoice) != NULL)
        {
            printf("\n");
            printf("Group Filter ID: ");
            intGroupFilter = GetInt();
        }
    }
    return;
}

